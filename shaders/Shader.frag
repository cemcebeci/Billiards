#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(set = 1, binding = 1) uniform sampler2D tex;layout(set = 0, binding = 0) uniform GlobalUniformBufferObject {    vec3 lightPos;    vec3 lightDir;    vec4 lightColor;    vec3 eyePos;} gubo;const float beta = 2.0f;const float g = 5.0f;const float cosout = 0.85;const float cosin  = 0.95;void main() {    vec3 Norm = normalize(fragNorm);    vec3 EyeDir = normalize(gubo.eyePos - fragPos);        float distance = length(gubo.lightPos - fragPos);    vec3 lightDir = (gubo.lightPos - fragPos) / distance;    float directionCosine = dot(lightDir, -gubo.lightDir);    float dimmingTerm = (directionCosine - cosout) / (cosin - cosout);    vec3 lightColor = gubo.lightColor.rgb * pow(g / distance, beta) * dimmingTerm;    vec3 Diffuse = texture(tex, fragUV).rgb * clamp(dot(Norm, lightDir),0.0,1.0);    vec3 Specular = vec3(pow(clamp(dot(Norm, normalize(lightDir + EyeDir)),0.0,1.0), 160.0f));    vec3 Ambient = texture(tex, fragUV).rgb * 0.05f;        outColor = vec4(clamp((Diffuse + Specular) * lightColor.rgb,0.0,1.0), 1.0f);}